VIM 快捷键（转）
2008-06-24 21:05
VIM快捷键:

ctags 文件名  做索引

光标移动：
 四个方向
   k
 h 0 l
   j

  ctrl+f, ctrl+b                 向下翻页，向上翻页
  ctrl+d, ctrl+u                 向下半翻页，向上半翻页
  $    移动行尾
  0    移动行首
  w    移动下一个词
  b    移动到上一个词
  gg   跳到文档的开始处
  G    跳到文档的末尾
  %    跳到匹配的括号处（"{ }""[]""()"）
  ctrl+i,tab                  跳到下一个jump point
  ctrl+o   跳到上一个jump point

  23gg, 23G, :23 跳到第23行
  ctrl+i, tab  跳到下一个跳点(Jump Point)
  ctrl+o  跳到上一个跳点

查找替换:
 #  从光标向后查找整个关键词
 * 从光标向前查找整个关键词
 g# 从光标向后查找关键词
 g* 从光标向前查找关键词
 fx，tx，Fx，Tx    在当前行查找字符

 查找替换例子：
 : s/SEARCH/REPLACE
 : s/If/Since          将下一个"If"换成"Since"
 : %s/If/Since       将全部"If"换成"Since"
 : 1,3 s/If/Since/g  只对1,3行有效,如无前缀,只对当前行有效

 表达式:
 . 代替一个字符
 * 表示一个或多个字符的重复
 
 /d.*an 可以匹配 dan, divan, debian
 
 单词边界:
 指定单词边界: \< 和 \>
 如: /\<d[a-z]*an\>    匹配以d开始,中间包含任意个小写字母,以an结束的单词

 /\$[0-9]*\.[0-9][0-9] 匹配查找 $XX...X.XX这要的数字,有且只有两位小数的

常用的编辑命令:
 a, i   在光标后插入, 在光标前插入
 dd  删除一行
 cc,S  删除一行后进入insert模式
 dw  删除一个单词
 cw  删除一个单词后进入insert模式
 x,dl  删除一个字符
 s,cl  删除一个字符后进入insert模式

 p  粘贴
 xp  交换两个字符
 ddp  交换两行

 y  复制
 yy  复制一行
 u  撤消
 ctrl+r                 重做
 .  重复上一次修改
 
 ctrl+r                重做
 .  重复上一次修改
 
划分窗格:
 :split/vsplit                分隔一个窗口
 :new/vnew 创建一个新的窗口
 :sf {filename}            在新窗口中打开filename
 :close  关闭当前窗口
 :only  关闭除当前窗口外所有窗口
 :ctrl-w h      到左面的窗口
 :ctrl-w j      到下面的窗口
 :ctrl-w k      到上面的窗口
 :ctrl-w l      到右面的窗口
 :ctrl-w t      到顶部的窗口
 :ctrl-w b      到底部的窗口
 
重复操作（宏操作）:
 q[a-z]  开始记录操作,记录到寄存器[a-z]中
 q  停止记录操作
 @[a-z]  执行寄存器中的操作
 @@  执行最近寄存器中记录的操作
 例子： 一个缓冲区有两行：
  sys/types.h
  stdio.h
 -->要改为：
  #include <sys/types.h>
  #include <stdio.h>
 操作如下：
  qa #开始记录
  ^ #移动行首
  i #进入insert模式
  #include < #输入内容
  $ #移动行尾
  i #进入insert模式
  > #输入内容
  q #停止记录

  移动另一行：
  @a即可执行相同的操作
 
Visual Mode操作:
 ctrl+v                 进入基于块的可视模式
 v  进入基于字符的可视模式
 V  进入基于行的可视模式
 
 c  删除选定的块
 I{string}<ESC> 选定块后按大写的I，输入字符串，再按ESC，
可以在块内每一行插入相同的内容
 

跳到声明处:
 [[  向前跳到顶格的第一个"{"
 []  向前跳到顶格的第一个"}"
 ][  向后跳到顶格的第一个"{"
 ]]  向后跳到顶格的第一个"}"
 [{  跳到本代码块(由{}界定)的开头
 [}  跳到本代码块的结尾

Shell:
 :ctrl+z/suspend 在shell下是挂起vim; gui下是最小化窗口
 :!{command} 执行shell命令
 :shell  开一个新的shell
 
 保存vim状态(挂起?)：
 :mksession session.vim      保存当前vim状态
 :source session.vim         回复vim状态
 vim -S session.vim         启动vim时恢复session

高效率移动



在插入模式之外



基本上来说，你应该尽可能少的呆在插入模式里面，因为在插入模式里面VIM
就像一个“哑巴”编辑器一样。很多新手都会一直呆在插入模式里面，因为这样易于
使用。但VIM的强大之处在于他的命令行模式！你会发现，在你越来越了解VIM之后，
你就会花越来越少的时间使用插入模式了。



使用 h，j，k，l



使用VIM高效率编辑的第一步，就是放弃使用箭头键。使用VIM，
你就不用频繁的在箭头键和字母键之间移来移去了，这会节省你很多时间。
当你在命令模式时，你可以用h，j，k，l来分别实现左，下，上，右箭头的功能。
一开始可能需要适应一下，但一旦习惯这种方式，你就会发现这样操作的高效之处了。



在你编辑你的电子邮件或者其他有段落的文本时，你可能会发现使用方向键和你预期的
效果不一样，有时候可能会一次跳过了很多行。这是因为你的段落在VIM看
来是一个大的长长的行。这时你可以在按h，j，k或者l 之前键入一个g，
这样VIM就会按屏幕上面的行如你所愿的移动了。



在当前行里面有效的移动光标



很多编辑器只提供了简单的命令来控制光标的移动（比如左，上，右，下，到行首/尾等）。
VIM则提供了很多强大的命令来满足你控制光标的欲望。
当光标从一点移动到另外一点，在这两点之间的文本（包括这两个点）称作被“跨过”，
这里的命令也被称作是motion。（简单说明一下，后面会用到这个重要的概念）



这里是常用到的一些命令（motion）：



fx：移动光标到当前行的下一个x处。很明显，x可以是任意一个字母，
而且你可以使用;来重复你的上一个f命令。



tx：和上面的命令类似，但是是移动到x的左边一个位置。（这真的很有用）



Fx：和fx类似，不过是往回找。



w：光标往前移动一个词。



b： 光标往后移动一个词。



0： 移动光标到当前行首。



^：移动光标到当前行的第一个字母位置。



$： 移动光标到行尾。



)：移动光标到下一个句子。



( ： 移动光标到上一个句子。



在整个文件里面有效移动光标



VIM有很多命令，可以用来到达文件里面你想到达的地方。
下面是一些在文件里面移动的命令：



<C-F>：向下移动一屏。



<C-B>：向上移动一屏。



G：到文件尾



numG：移动光标到指定的行（num）。（比如10G就是到第10行）



gg：到文件首



H：移动光标到屏幕上面



M：移动光标到屏幕中间



L：移动光标到屏幕下面



*：读取光标处的字符串，并且移动光标到它再次出现的地方。



#：和上面的类似，但是是往反方向寻找。



/text：从当前光标处开始搜索字符串text，并且到达text出现的地方。
必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按n。



？text：和上面类似，但是是反方向。



ma：在当前光标的位置标记一个书签，名字为a。书签名只能是小写字母。
你看不见书签的存在，但它确实已经在那里了。



`a：到书签a处。注意这个不是单引号，它一般位于大部分键盘的1的左边。



`.：到你上次编辑文件的地方。这个命令很有用，而且你不用自己去标记它。





高效的输入



使用关键词自动完成



VIM
有一个非常漂亮的关键词自动完成系统。这表示，你可以输入一个长词的一部分，
然后按一下某个键，然后VIM就替你完成了这个长词的输入了。举个例子：你有
一个变量名为 iAmALongAndAwkwardVarName 在你写的代码的某个地方。
也许你不想每回都自己一个一个字母的去输入它。



使用关键词自动完成功能，你只需要输入开始几个字母（比如iAmAL），
然后按<C-N>（按住Ctrl，再按N）或者<C-P>。如果VIM没有给出你想要的词，
基本按，直到你满意为止，VIM会一直循环它找到的匹配的字符串。



聪明的进入插入模式



很多新手进入插入模式都只是用i。这样当然可以进入插入模式，但通常不是那么合适，
因为VIM提供了很多进入插入模式的命令。下面是最常用的一些：



i：在当前字符的左边插入



I：在当前行首插入



a：在当前字符的右边插入



A：在当前行尾插入



o：在当前行下面插入一个新行



O：在当前行上面插入一个新行



c{motion}：删除motion命令跨过的字符，并且进入插入模式。
比如：c$，这将会删除从光标位置到行尾的字符并且进入插入模式。ct！，
这会删除从光标位置到下一个叹号（但不包括），然后进入插入模式。
被删除的字符被存在了剪贴板里面，并且可以再粘贴出来。



d{motion}：和上面差不多，但是不进入插入模式。





有效的移动大段的文本



使用可视选择（visual selections）和合适的选择模式



不想最初的VI，VIM允许你高亮（选择）一些文本，并且进行操作。
这里有三种可视选择模式：



v：按字符选择。经常使用的模式，所以亲自尝试一下它。



V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。



<C-V>：按块选择。非常强大，只在很少的编辑器中才有这样的功能。
你可以选择一个矩形块，并且在这个矩形里面的文本会被高亮。



在选择模式的时候使用上面所述的方向键和命令（motion）。
比如，vwww，会高亮光标前面的三个词。Vjj将会高亮当前行以及下面两行。



在可视选择模式下剪切和拷贝



一旦你高亮了选区，你或许想进行一些操作：



d：剪贴选择的内容到剪贴板。



y：拷贝选择的内容到剪贴板。



c：剪贴选择的内容到剪贴板并且进入插入模式。



在非可视选择模式下剪切和拷贝



如果你很清楚的知道你想拷贝或者剪切什么，那你根本就不需要进入可视选择模式。
这样也会节省时间：



d{motion}：剪切motion命令跨过的字符到剪贴板。
比如，dw会剪切一个词而dfS会将从当前光标到下一个S之间的字符剪切至剪贴板。



y{motion}：和上面类似，不过是拷贝。



c{motion}：和d{motion}类似，不过最后进入插入模式。



dd：剪切当前行。



yy：拷贝当前行。



cc：剪切当前行并且进入插入模式。



D：剪切从光标位置到行尾到剪贴板。



Y：拷贝当前行。



C：和D类似，最后进入插入模式。



x：剪切当前字符到剪贴板。



s：和x类似，不过最后进入插入模式。



粘贴



粘贴很简单，按p。



使用多重剪贴板



很多编辑器都只提供了一个剪贴板。VIM有很多。
剪贴板在VIM里面被称为寄存器（Registers）。
你可以列出当前定义的所有寄存器名和它们的内容，命令为":reg"。
最好使用小写字母来作为寄存器的名称，因为大写的有些被VIM占用了。



使用寄存器的命令为双引号“。



比如：我们要拷贝当前行到寄存器k。你应该按 "kyy。
（你也可以使用 V"ky。为什么这样也可以呢？）现在当前行应该已经存在了
寄存器k里面直到你又拷贝了一些东西进入寄存器k。现在你可以使用命令 "kp 来
粘贴寄存器k里面的内容到你想要的位置。





避免重复



令人惊奇的 . 命令



在VI里面，输入 . (小数点符号），将会重复你给入的上一个命令。
比如，你上个命令为 'dw'（删除一个词），VI将会接着再删除一个词。



使用数字



使用数字也是VIM强大的而且很节省时间的重要特性之一。
在很多VIM的命令之前都可以使用一个数字，这个数字将会告诉VIM这个命令需要执行几次。
比如：



3j 将会把光标向下移动三行。



10dd 将会删除十行。



y3" 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。



数字是扩展motion命令作用域非常有效的方法。



记录宏



有时候，你会发现你自己在文章的每段或者每行都重复相同的一系列动作。
VIM允许你记录一个宏来完成你的特殊需要。



qregister：记录宏到寄存器register，这里register是任意的你的寄存器的名字。
比如qa，将会记录并且把宏存在寄存器a里面。



q：结束宏的记录。



@register：使用存在寄存器register的宏。比如@a，将会使用存在寄存器a里面的宏。



必须要记住的是，宏只记录了你的系列按键并且重复执行它们。
它们不是魔法。因为在VIM里面完成目的的方法有很多，
所以有时候你要小心选择命令来记录你的宏。因为它们会在所有你要执行它的地方执行。





用VIM写代码



VIM是一个绝好的编辑器来写代码，因为它有一些特性是专门为程序员而设。
这里是一些常用的：



]p：和p的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置。试一下！



%：匹配花括号，方括号，括号等。在一个括号的上面，然后按%，
鼠标就会出现在匹配的另外一半括号处。



>>：缩进所有选择的代码



<<：和上面类似，但是反缩进



gd：到达光标所在处函数或者变量的定义处。



K：在Man里面查找光标当前所在处的词。
